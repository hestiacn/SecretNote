<?php
// 启用严格错误报告
declare(strict_types=1);
error_reporting(E_ALL);
ini_set('display_errors', '1');

require_once __DIR__.'/include/Parsedown.php';

// 安全头设置
header("X-Frame-Options: DENY");
header("X-XSS-Protection: 1; mode=block");
header("X-Content-Type-Options: nosniff");
header("Content-Security-Policy: default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://cdn.tiny.cloud");
header("Referrer-Policy: strict-origin-when-cross-origin");
define('IP_API', 'https://cn.apihz.cn/api/ip/chaapi.php?id=10002193&key=7e1f5d0b23db5803520f39f63c917368&ip=');

// 会话管理
if (session_status() === PHP_SESSION_NONE) {
    session_start([
        'cookie_secure' => isset($_SERVER['HTTPS']),
        'cookie_httponly' => true,
        'cookie_samesite' => 'Strict'
    ]);
}

// 安全函数
function sanitizeInput(string $input): string {
    return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');
}

function generateCSRFToken(): string {
    if (empty($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}

function validateCSRFToken(string $token): bool {
    return hash_equals($_SESSION['csrf_token'] ?? '', $token);
}

// 允许的HTML标签白名单（用于富文本过滤）
function sanitizeHTML(string $input): string {
    require_once __DIR__.'/assets/htmlpurifier/library/HTMLPurifier.auto.php';
    
    $config = HTMLPurifier_Config::createDefault();
    
    // 1. 基础配置
    $allowed_tags = 'p,strong,em,u,h1,h2,h3,h4,h5,h6,img,a,div,span,br,hr,ul,ol,li,blockquote,pre,code,video';
    $config->set('HTML.Allowed', $allowed_tags);

    // 2. 缓存配置（先于HTML定义）
    $cacheDir = __DIR__.'/cache/htmlpurifier/';
    if (!file_exists($cacheDir)) mkdir($cacheDir, 0755, true);
    $config->set('Cache.SerializerPath', $cacheDir);

    // 3. HTML定义配置
    $config->set('HTML.DefinitionID', 'custom-attributes-v2'); // 更新版本号
    $config->set('HTML.DefinitionRev', 2); // 更新修订号

    if ($def = $config->maybeGetRawHTMLDefinition()) {
        $def->addAttribute('img', 'data-type', 'Text');
        $def->addAttribute('a', 'rel', 'Enum#nofollow');
        $def->addElement('video', 'Block', 'Flow', 'Common', [
            'src' => 'URI',
            'width' => 'Length',
            'height' => 'Length',
            'controls' => 'Bool',
            'preload' => 'Enum#auto,metadata,none'
        ]);
    }

    // 4. 属性白名单（在定义之后设置）
    $config->set('HTML.AllowedAttributes', [
        'img.src' => true,
        // ...其他属性配置
    ]);

    // 5. 最后创建实例
    $purifier = new HTMLPurifier($config);
    
    return $purifier->purify(trim($input));
}

// 实时Markdown预览功能
function parsedown(string $text): string {
    static $parser = null;
    if (!$parser) {
        $parser = new Parsedown();
        $parser->setSafeMode(true);
    }
    return $parser->text($text);
}

// 数据库配置
define('CONFIG_FILE', __DIR__ . '/include/config.php'); 

if (!file_exists(CONFIG_FILE)) {
    die(json_encode(['success' => false, 'message' => '配置文件缺失，请检查安装！']));
}
require_once(CONFIG_FILE);

// 验证常量是否定义
$requiredConstants = ['DB_HOST', 'DB_USER', 'DB_PASS', 'DB_NAME'];
foreach ($requiredConstants as $constant) {
    if (!defined($constant)) {
        die(json_encode(['success' => false, 'message' => "配置错误：常量 $constant 未定义！"]));
    }
}

// 数据库连接（增加错误处理）
try {
    $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
    if ($mysqli->connect_errno) {
        throw new RuntimeException("数据库连接失败: ".$mysqli->connect_error);
    }
    $mysqli->set_charset('utf8mb4');
} catch (Exception $e) {
    die(json_encode(['success' => false, 'message' => '数据库错误：' . $e->getMessage()]));
}

// 初始化变量
$tablePrefix = DB_PREFIX;
$csrfToken = generateCSRFToken();
$error = null;
$success = null;

// 在数据库连接后添加分类查询
$categories = $mysqli->query("SELECT * FROM {$tablePrefix}typeid ORDER BY id")->fetch_all(MYSQLI_ASSOC);

// 处理表单提交
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    header('Content-Type: application/json'); // 设置响应头为 JSON

    if (!validateCSRFToken($_POST['csrf_token'] ?? '')) {
        echo json_encode(['success' => false, 'message' => 'CSRF令牌验证失败']);
        exit;
    }

    // 字段初始化
    $ip = filter_var($_SERVER['HTTP_X_FORWARDED_FOR'] ?? $_SERVER['REMOTE_ADDR'] ?? '', FILTER_VALIDATE_IP) ?: '无效IP';
    $thetitle = sanitizeInput($_POST['thetitle'] ?? '');
    $nicheng = sanitizeInput($_POST['nicheng'] ?? '');
    $image = sanitizeInput($_POST['avatar'] ?? 'touxiang/default3/1.gif');
    $content = sanitizeHTML($_POST['content'] ?? '');
    $qiaoqiao = isset($_POST['qiaoqiao']) ? 1 : 0;
    $qiaoqiaopass = $_POST['qiaoqiaopass'] ?? '';
    $typeid = (int)($_POST['typeid'] ?? 0);
    $editor_type = sanitizeInput($_POST['editor_type'] ?? 'markdown');
    $content_md = '';
    $content_html = '';
    $media_type = $_POST['media_type'] ?? 'none';
    $local_image = '';
    $external_video = '';

    // 验证逻辑
    $requiredFields = ['thetitle' => '标题', 'nicheng' => '昵称', 'content' => '内容'];
    foreach ($requiredFields as $field => $name) {
        if (empty($_POST[$field] ?? '')) {
            echo json_encode(['success' => false, 'message' => "{$name}不能为空"]);
            exit;
        }
    }

	$content_md = '';
	$content_html = '';
	
	if ($editor_type === 'markdown') {
	    // 从隐藏域获取原始Markdown内容
	    $content_md = trim($_POST['content'] ?? '');
	    $content_html = parsedown($content_md);
	    $content = sanitizeHTML($content_html); 
	} else {
	    // 直接处理富文本内容
	    $raw_content = $_POST['content'] ?? '';
	    $content = sanitizeHTML($raw_content);
	    $content_html = $content; // 兼容显示层
	}
    // 在表单处理部分增加媒体处理
    if ($media_type === 'image') {
        $local_image = sanitizeInput($_POST['local_image']);
    } elseif ($media_type === 'video') {
        if (!empty($_POST['local_image'])) {
            $local_image = sanitizeInput($_POST['local_image']);
        } else {
            $external_video = sanitizeInput($_POST['external_video']);
        }
    }

    // IP 地址处理
    $ip = filter_var($_SERVER['HTTP_X_FORWARDED_FOR'] ?? $_SERVER['REMOTE_ADDR'] ?? '', FILTER_VALIDATE_IP) ?: '';
    $location = '未知地区';
    if ($ip) {
        require_once __DIR__.'/include/ip.php';
        $location = getIPLocation($ip);
    }

    // 违禁词检测模块
    define('BANNED_WORDS_FILE', __DIR__.'/words.b64');
    define('CACHE_DIR', __DIR__.'/cache');
    define('REGEX_CACHE', CACHE_DIR.'/regex_cache.dat');

    if (!file_exists(CACHE_DIR)) {
        mkdir(CACHE_DIR, 0755, true);
    }

    // 加载违禁词库
    function loadBannedWords() {
        if (!file_exists(BANNED_WORDS_FILE)) return [];
        $content = base64_decode(file_get_contents(BANNED_WORDS_FILE));
        return array_filter(explode("\n", $content), function($word) {
            $word = trim($word);
            return !empty($word) && $word[0] !== '#';
        });
    }

    // 智能正则生成器
function buildSmartRegex($words) {
    if (!is_array($words)) {
        error_log("Invalid input for buildSmartRegex: " . json_encode($words));
        return [];
    }

    $chunks = array_chunk($words, 50);
    $patterns = [];
    foreach ($chunks as $chunk) {
        $escaped = array_map(function($word) {
            if (!is_string($word) || trim($word) === '') {
                return ''; // 如果不是字符串或为空，直接返回空字符串
            }
            // 确保编码为 UTF-8
            $word = mb_convert_encoding($word, 'UTF-8', 'auto');
            if ($word === false) {
                return ''; // 如果编码转换失败，返回空字符串
            }
            // 去除控制字符
            $word = preg_replace('/\p{C}+/u', '', $word);
            if (preg_match('/\p{Han}/u', $word)) {
                return '(?<!\pL)' . preg_quote($word, '/') . '(?!\pL)';
            }
            return '\b' . preg_quote($word, '/') . '\b';
        }, $chunk);
        $escaped = array_filter($escaped, function($item) {
            return !empty($item);
        });
        if (!empty($escaped)) {
            $patterns[] = '/' . implode('|', $escaped) . '/iu';
        }
    }
    return $patterns;
}

    // 带调试的违禁词检测
    function detectBannedWords($text, $patterns) {
        $cleanText = preg_replace('/[^\p{Han}a-zA-Z0-9]/u', '', $text);
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $cleanText, $matches)) {
                error_log("[违禁词告警] 匹配规则: $pattern");
                error_log("[违禁词告警] 命中内容: ".$matches[0]);
                return true;
            }
        }
        return false;
    }

    // 主执行流程
    $bannedWords = loadBannedWords();
    if (file_exists(REGEX_CACHE) && (time()-filemtime(REGEX_CACHE)) < 3600) {
        $patterns = unserialize(file_get_contents(REGEX_CACHE));
    } else {
        $patterns = buildSmartRegex($bannedWords);
        file_put_contents(REGEX_CACHE, serialize($patterns));
        error_log("[系统通知] 已重建违禁词正则缓存，共".count($patterns)."组模式");
    }

    // 执行检测
    if (!$error && !empty($patterns)) {
        $checkText = $thetitle . ' ' . $content;
        if (detectBannedWords($checkText, $patterns)) {
            echo json_encode(['success' => false, 'message' => '内容包含敏感信息，请调整后重新提交']);
            exit;
        }
    }
	// 在相似度检测之前添加重复内容检查
	$stmt = $mysqli->prepare("SELECT COUNT(*) FROM {$tablePrefix}book WHERE content = ? AND time > NOW() - INTERVAL 1 DAY");
	$stmt->bind_param('s', $content);
	$stmt->execute();
	$count = $stmt->get_result()->fetch_row()[0];
	if ($count > 0) {
	    echo json_encode(['success' => false, 'message' => '请勿重复提交相同内容']);
	    exit;
	}
    // 相似度检测
    if (!$error) {
        $similarThreshold = 75;
        $checkHours = 24;
        $stmt = $mysqli->prepare("SELECT content FROM {$tablePrefix}book WHERE time > NOW() - INTERVAL ? HOUR ORDER BY id DESC LIMIT 100");
        $stmt->bind_param('i', $checkHours);
        $stmt->execute();
        $result = $stmt->get_result();

        $inputContent = preg_replace('/[^\p{Han}a-z0-9]/u', '', $content);
        $inputLength = mb_strlen($inputContent);

        while ($row = $result->fetch_assoc()) {
            $dbContent = preg_replace('/[^\p{Han}a-z0-9]/u', '', $row['content']);
            $dbLength = mb_strlen($dbContent);

            if ($inputLength > 0 && abs($inputLength - $dbLength)/$inputLength > 0.3) {
                continue;
            }

            similar_text($inputContent, $dbContent, $percent);
            if ($percent >= $similarThreshold) {
                echo json_encode(['success' => false, 'message' => "内容相似度过高（相似度".round($percent,1)."%），请修改后重试"]);
                exit;
            }
        }
    }

    // 提交频率限制
    if (!$error) {
        $stmt = $mysqli->prepare("SELECT COUNT(*) FROM {$tablePrefix}book WHERE ip = ? AND time > NOW() - INTERVAL 1 HOUR");
        $stmt->bind_param('s', $ip);
        $stmt->execute();
        $count = $stmt->get_result()->fetch_row()[0];
        if ($count >= 5) {
            echo json_encode(['success' => false, 'message' => '提交过于频繁，请1小时后再试']);
            exit;
        }
    }

    // 验证码验证
    if (!$error) {
        $captcha = $_POST['captcha'] ?? '';
        if (empty($captcha)) {
            echo json_encode(['success' => false, 'message' => '验证码不能为空']);
            exit;
        } elseif (!isset($_SESSION['captcha']) || strtoupper($captcha) !== strtoupper($_SESSION['captcha'])) {
            echo json_encode(['success' => false, 'message' => '验证码不正确']);
            exit;
        }
    }

    // 悄悄话密码验证
    if (!$error && $qiaoqiao && empty($qiaoqiaopass)) {
        echo json_encode(['success' => false, 'message' => '开启悄悄话必须设置密码']);
        exit;
    }

    // 数据库操作
    if (!$error) {
        $qiaoqiaopass = $qiaoqiao ? password_hash($qiaoqiaopass, PASSWORD_DEFAULT) : '';
        $allow_html = (int)($_POST['allow_html'] ?? 0); 
		$stmt = $mysqli->prepare("INSERT INTO {$tablePrefix}book (
		    thetitle, nicheng, content, content_md, content_html, editor_type, shenhe, ip, ipshiji, 
		    qiaoqiao, qiaoqiaopass, media_type, local_image, external_video, allow_html
		) VALUES (?, ?, ?, ?, ?, ?, 1, ?, ?, ?, ?, ?, ?, ?, ?)");
		
		// 确保类型定义字符串和绑定变量数量一致
		$stmt->bind_param('ssssssssissssi',
		    $thetitle,
		    $nicheng,
		    $content,
		    $content_md,
		    $content_html,
		    $editor_type,
		    $ip,
		    $location,
		    $qiaoqiao,
		    $qiaoqiaopass,
		    $media_type,
		    $local_image,
		    $external_video,
		    $allow_html
		);

        if ($stmt->execute()) {
            echo json_encode(['success' => true, 'message' => '留言添加成功']);
        } else {
            echo json_encode(['success' => false, 'message' => '数据库错误: ' . $stmt->error]);
        }
    }
    exit;
}
?>


<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>蓝宝石留言本 - 发布匿名留言</title>
    <link href="../assets/bootstrap-5.3.3/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../assets/bootstrap-icons-1.11.3/font/bootstrap-icons.min.css">
    <style>
        /* 新增编辑器相关样式 */
        .editor-toolbar {
            display: flex;
            gap: 8px;
            padding: 8px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            flex-wrap: wrap;
        }
        .toolbar-btn {
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            background: white;
            transition: all 0.2s;
        }
        .toolbar-btn:hover {
            background-color: #e9ecef;
            border-color: #0d6efd;
            color: #0d6efd;
        }
        .emoji-panel {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 1000;
            display: none;
            grid-template-columns: repeat(8, 1fr);
            gap: 5px;
            max-width: 300px;
        }
        .emoji-item {
            cursor: pointer;
            font-size: 20px;
            padding: 3px;
            text-align: center;
        }
        .image-upload-wrapper {
            position: relative;
            display: inline-block;
        }
        #imageInput {
            display: none;
        }
        #editor-container {
            min-height: 300px;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 0 0 4px 4px;
            overflow-y: auto;
            outline: none;
        }
        .avatar-selector {
            grid-template-columns: repeat(6, 1fr);
            gap: 2px;
            margin: 15px 0;
        }
        .avatar-option {
            cursor: pointer;
            border: 2px solid transparent;
            border-radius: 5px;
            padding: 2px;
        }
        .avatar-option.selected {
            border-color: #0d6efd;
		  width: 60px; 
		  height: 60px; 
        }
        .container {
            max-width: 960px;
            margin: 0 auto;
            background: white;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }
        .header {
            background-color: #0d6efd;
            color: white;
            padding: 2rem;
            border-radius: 0 0 1rem 1rem;
        }  
        /* 增加编辑器模式切换样式 */
		.editor-mode-btn.active {
		    background-color: #0d6efd;
		    color: white !important;
		}
		.markdown-container textarea {
		    font-size: 14px;
		    line-height: 1.6;
		    tab-size: 4;
		}
		.preview-area {
		    background: #f8f9fa;
		    border-radius: 4px;
		}
		.preview-area h1, .preview-area h2 {
		    border-bottom: 1px solid #eee;
		    padding-bottom: 0.3em;
		}
		/* 新增样式 */
		#html-mode-toggle.active {
		    background-color: #dc3545;
		    color: white !important;
		    animation: pulse 1.5s infinite;
		}
		
		@keyframes pulse {
		    0% { box-shadow: 0 0 0 0 rgba(220,53,69,.5); }
		    70% { box-shadow: 0 0 0 10px rgba(220,53,69,0); }
		    100% { box-shadow: 0 0 0 0 rgba(220,53,69,0); }
		}
		
		.uploaded-media {
		    max-width: 300px;
		    border: 2px dashed #0d6efd;
		    margin: 10px 0;
		}
		
		#mediaModal .modal-body {
		    background: #f8f9fa;
		    border-radius: 8px;
		}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="display-5 fw-bold mb-3">发布匿名留言</h1>
        </div>

        <div class="content p-4">
	    <!-- 新增消息提示 -->
	    <?php if ($error): ?>
	    <div class="alert alert-danger alert-dismissible fade show" role="alert">
	        <?= htmlspecialchars($error) ?>
	        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
	    </div>
	    <?php endif; ?>
	
	    <?php if ($success): ?>
	    <div class="alert alert-success alert-dismissible fade show" role="alert">
	        <?= htmlspecialchars($success) ?>
	        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
	    </div>
	    <?php endif; ?>
            <form method="post">
                <!-- 头像选择 -->
                <div class="mb-3">
                    <label class="form-label">选择头像</label>
                    <div class="avatar-selector">
                        <?php
                        $avatars = array_map(fn($n) => "assets/touxiang/default3/{$n}.gif", range(1, 24));
                        foreach ($avatars as $avatar):
                        ?>
                        <label class="avatar-option">
                            <input type="radio" name="avatar" value="<?= htmlspecialchars($avatar) ?>" 
                                   <?= $avatar === 'touxiang/default3/1.gif' ? 'checked' : '' ?> hidden>
                            <img src="../<?= htmlspecialchars($avatar) ?>" 
                                 class="img-thumbnail" 
                                 width="60" 
                                 alt="头像 <?= $avatar ?>">
                        </label>
                        <?php endforeach; ?>
                    </div>
                </div>
                <!-- 分类选择 -->
                <div class="mb-3">
                    <label class="form-label">选择分类</label>
                    <select class="form-select" name="typeid">
                        <option value="0">-- 无分类 --</option>
                        <?php foreach ($categories as $cat): ?>
                        <option value="<?= $cat['id'] ?>"><?= htmlspecialchars($cat['typename']) ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <!-- 表单字段 -->
                <input type="hidden" name="csrf_token" value="<?= htmlspecialchars($csrfToken ?? '') ?>">
			<?php
			$fields = [
			    'thetitle' => ['label' => '标题', 'type' => 'text'],
			    'nicheng' => ['label' => '昵称（默认匿名）', 'type' => 'text']
			];
			foreach ($fields as $name => $config): ?>
			<div class="mb-3">
			    <label class="form-label"><?= htmlspecialchars($config['label']) ?></label>
			    <input type="<?= htmlspecialchars($config['type']) ?>" 
			           class="form-control" 
			           name="<?= htmlspecialchars($name) ?>"
			           value="<?= $name === 'nicheng' ? '匿名留言' : '' ?>"
			           <?= $name === 'thetitle' ? 'required' : '' ?>>
			</div>
			<?php endforeach; ?>

                <!-- 富文本编辑器 -->
                <div class="mb-3">
                    <label class="form-label">内容</label>
                    <div class="border rounded">
                        <div class="editor-toolbar">

                            <button type="button" class="toolbar-btn" data-command="bold" title="加粗">
                                <i class="bi bi-type-bold"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-command="italic" title="斜体">
                                <i class="bi bi-type-italic"></i>
                            </button>
                            <button type="button" class="toolbar-btn" data-command="underline" title="下划线">
                                <i class="bi bi-type-underline"></i>
                            </button>
                            <div class="image-upload-wrapper">
                                <button type="button" class="toolbar-btn" title="插入图片">
                                    <i class="bi bi-image"></i>
                                    <input type="file" id="imageInput" accept="image/*">
                                </button>
                            </div>
                            <div class="position-relative">
                                <button type="button" class="toolbar-btn" title="插入表情">
                                    <i class="bi bi-emoji-smile"></i>
                                </button>
                                <div class="emoji-panel">
                                    <?php
                                    $emojis = ['😀','😃','😄','😁','😆','😅','😂','🤣',
                                              '❤️','👍','🎉','🚀','😊','😎','🥳','🤩'];
                                    foreach ($emojis as $emoji): ?>
                                    <span class="emoji-item" data-emoji="<?= $emoji ?>"><?= $emoji ?></span>
                                    <?php endforeach; ?>
                                </div>
                            </div>
                            <div class="btn-group">
				        <button type="button" class="toolbar-btn editor-mode-btn active" data-mode="markdown">
				            <i class="bi bi-markdown"></i> MD
				        </button>
				        <button type="button" class="toolbar-btn editor-mode-btn" data-mode="rich-text">
				            <i class="bi bi-code-square"></i> HTML
				        </button>
				        </div>
				        <div class="btn-group">
					    <!-- 视频插入按钮 -->
					    <button type="button" class="toolbar-btn" id="insert-video" title="插入视频">
					        <i class="bi bi-camera-reels"></i>
					    </button>
					    
					    <!-- HTML模式开关 -->
					    <button type="button" class="toolbar-btn" id="html-mode-toggle" title="HTML模式">
					        <i class="bi bi-code-slash"></i>
					    </button>
						</div>
                           </div>
                           <!-- 媒体插入模态框 -->
<div class="modal fade" id="mediaModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">插入媒体</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">媒体类型</label>
                    <select class="form-select" id="mediaSource">
                        <option value="local">本地上传</option>
                        <option value="external">外部链接</option>
                    </select>
                </div>
                <div id="mediaInputContainer">
                    <input type="file" class="form-control" accept="image/*,video/*" id="mediaFile">
                    <input type="url" class="form-control d-none" placeholder="https://" id="mediaUrl">
                </div>
                <div class="form-text mt-2">
                    支持格式：JPEG/PNG/MP4，最大10MB
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="confirmMedia">插入</button>
            </div>
        </div>
    </div>
</div>
                        <!-- 增加Markdown编辑器容器 -->
					<div id="markdown-container" class="d-none">
					    <textarea id="markdown-editor" class="form-control" 
					              placeholder="使用Markdown语法书写..." 
					              style="height:300px; font-family: monospace;"></textarea>
					    <div class="mt-2">
					        <button type="button" class="btn btn-sm btn-outline-secondary preview-btn">
					            <i class="bi bi-eye"></i> 预览
					        </button>
					    </div>
					    <div class="preview-area border p-3 mt-2 d-none"></div>
					</div>
					<div id="rich-editor-container" class="border rounded">
                        <div id="editor-container" 
                             contenteditable="true" 
                             data-placeholder="请输入内容..."
                             class="p-3"></div>
                    </div>
                    <textarea name="content" id="hidden-content" hidden></textarea>
                </div>
				<!-- 新增字符数提示 -->
				<div class="mt-2 text-end text-muted small">
				    当前字符数：<span id="char-counter">0</span>/最低10字
				</div>
                <!-- 悄悄话设置 -->
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" 
                               type="checkbox" 
                               name="qiaoqiao" 
                               id="qiaoqiao">
                        <label class="form-check-label" for="qiaoqiao">启用悄悄话</label>
                    </div>
                    <input type="password" 
                           class="form-control mt-2" 
                           name="qiaoqiaopass" 
                           id="qiaoqiaopass" 
                           placeholder="设置查看密码"
                           disabled
                           required>
                </div>

                <!-- 验证码 -->
			<div class="mb-3 row align-items-center">
			    <div class="col-md-4">
			        <input type="text" 
			               class="form-control"
			               name="captcha"
			               placeholder="输入验证码"
			               required>
			    </div>
				<div class="col-md-4 mt-2 mt-md-0">
				    <img src="../include/captcha.php" 
				         alt="验证码" 
				         class="img-thumbnail"
				         onclick="this.src='../include/captcha.php?'+Date.now()"
				         id="captchaImg"
				         style="cursor: pointer; height: 40px;">
				</div>
			</div>

                <button type="submit" class="btn btn-primary w-100 py-2">
                    <i class="bi bi-send-check me-2"></i>提交留言
                </button>
            </form>
        </div>
    </div>
    
    <input type="hidden" name="media_type" id="mediaType" value="none">
<input type="hidden" name="local_image" id="localImage">
<input type="hidden" name="external_video" id="externalVideo">
<input type="hidden" name="allow_html" id="allowHtml" value="0">
<script src="../assets/bootstrap-5.3.3/js/marked.min.js"></script>
    <script>
// 更新编辑器交互脚本
let currentMode = 'markdown';

// 模式切换功能
document.querySelectorAll('.editor-mode-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        document.querySelectorAll('.editor-mode-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        currentMode = this.dataset.mode;
        
        document.getElementById('markdown-container').classList.toggle('d-none', currentMode !== 'markdown');
        document.getElementById('rich-editor-container').classList.toggle('d-none', currentMode === 'markdown');
        
        if(currentMode === 'markdown') {
            document.getElementById('markdown-editor').value = hiddenContent.value;
        } else {
            hiddenContent.value = editor.innerHTML;
        }
    });
});

// Markdown预览功能
document.querySelector('.preview-btn').addEventListener('click', function() {
    const previewArea = document.querySelector('.preview-area');
    previewArea.innerHTML = marked.parse(document.getElementById('markdown-editor').value);
    previewArea.classList.toggle('d-none');
});

// 更新表单提交处理
document.querySelector('form').addEventListener('submit', function(e) {
    if(currentMode === 'markdown') {
        hiddenContent.value = document.getElementById('markdown-editor').value;
    }
    
    const formData = new FormData(this);
    formData.append('editor_type', currentMode);
    
    // 阻止默认提交，改为AJAX发送
    e.preventDefault();
    fetch(window.location.href, {
        method: 'POST',
        body: formData
    }).then(/* 处理响应 */);
});
    document.addEventListener('DOMContentLoaded', function() {
        const editor = document.getElementById('editor-container');
        const hiddenContent = document.getElementById('hidden-content');
        let isEmojiPanelOpen = false;

        // 同步内容到隐藏域
        function syncContent() {
            hiddenContent.value = editor.innerHTML;
        }

        // 基础格式功能
        document.querySelectorAll('[data-command]').forEach(btn => {
            btn.addEventListener('click', function() {
                document.execCommand(this.dataset.command, false, null);
                editor.focus();
                syncContent();
            });
        });

        // Emoji功能
        document.querySelectorAll('.emoji-item').forEach(item => {
            item.addEventListener('click', function() {
                const emoji = this.dataset.emoji;
                document.execCommand('insertText', false, emoji);
                syncContent();
            });
        });

        // 显示/隐藏Emoji面板
        document.querySelector('[title="插入表情"]').addEventListener('click', function(e) {
            const panel = this.nextElementSibling;
            panel.style.display = panel.style.display === 'grid' ? 'none' : 'grid';
            e.stopPropagation();
        });

        // 点击外部关闭Emoji面板
        document.addEventListener('click', () => {
            document.querySelector('.emoji-panel').style.display = 'none';
        });

        // 图片上传功能
        document.getElementById('imageInput').addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;

            // 验证文件
            if (!file.type.startsWith('image/')) {
                alert('仅支持图片文件');
                return;
            }
            if (file.size > 2 * 1024 * 1024) {
                alert('图片大小不能超过2MB');
                return;
            }

            // 插入临时预览
            const tempUrl = URL.createObjectURL(file);
            const tempImg = document.createElement('img');
            tempImg.src = tempUrl;
            tempImg.style.maxWidth = '200px';
            tempImg.classList.add('uploading');
            document.execCommand('insertHTML', false, tempImg.outerHTML);
            
            // 上传文件
            const formData = new FormData();
            formData.append('file', file);
            formData.append('csrf_token', '<?= $csrfToken ?>');

            try {
                const response = await fetch('../include/upload.php', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                if (result.errno !== 0) throw new Error(result.message);

                // 替换临时图片
                const newImg = `<img src="${result.data.url}" style="max-width:100%" alt="用户上传">`;
                editor.innerHTML = editor.innerHTML.replace(tempUrl, newImg);
                syncContent();
            } catch (error) {
                alert('上传失败: ' + error.message);
                tempImg.remove();
            } finally {
                URL.revokeObjectURL(tempUrl);
            }
        });
// 新增实时字符计数功能 ---------------------
function updateCharCount() {
    let contentLength = 0;

    if (currentMode === 'markdown') {
        contentLength = document.getElementById('markdown-editor').value.trim().length;
    } else {
        contentLength = document.getElementById('editor-container').textContent.trim().length;
    }

    document.getElementById('char-counter').textContent = contentLength;
}

// 监听输入事件
document.getElementById('markdown-editor').addEventListener('input', updateCharCount);
document.getElementById('editor-container').addEventListener('input', updateCharCount);

// 初始化计数
updateCharCount();
// 结束新增 ---------------------------
        // 自动保存内容
		// editor.addEventListener('input', syncContent);
		
		// 修改后（增加实时同步）
		function syncContent() {
		    if(currentMode === 'markdown') {
		        document.getElementById('hidden-content').value = document.getElementById('markdown-editor').value;
		    } else {
		        document.getElementById('hidden-content').value = editor.innerHTML;
		    }
		}
		
		// 增加定时同步（每2秒）
		setInterval(syncContent, 2000);
        editor.addEventListener('paste', syncContent);

        // 头像选择功能
        document.querySelectorAll('.avatar-option').forEach(item => {
            item.addEventListener('click', function() {
                document.querySelectorAll('.avatar-option').forEach(el => {
                    el.classList.remove('selected');
                });
                this.classList.add('selected');
                this.querySelector('input').checked = true;
            });
        });

        // 悄悄话功能
        document.getElementById('qiaoqiao').addEventListener('change', function() {
            const passInput = document.getElementById('qiaoqiaopass');
            passInput.disabled = !this.checked;
            passInput.required = this.checked;
            if (!this.checked) passInput.value = '';
        });

        // 表单提交验证
        document.querySelector('form').addEventListener('submit', function(e) {
            // 内容长度验证
            if (editor.textContent.trim().length < 10) {
                alert('内容不能少于10个字符');
                e.preventDefault();
                return;
            }

            // 密码验证
            if (document.getElementById('qiaoqiao').checked && 
                document.getElementById('qiaoqiaopass').value.length < 6) {
                alert('查看密码至少需要6位字符');
                e.preventDefault();
            }
            
		    if (验证失败) {
		        document.getElementById('captchaImg').src = '../include/captcha.php?' + Date.now();
		        e.preventDefault();
		    }
        });
    });
// 在表单提交验证部分增加字符数检测逻辑（约在 line 880-900）
document.querySelector('form').addEventListener('submit', function(e) {
    let contentLength = 0;

    if (currentMode === 'markdown') {
        contentLength = document.getElementById('markdown-editor').value.trim().length;
    } else {
        // 使用 innerText 获取纯文本内容
        contentLength = document.getElementById('editor-container').innerText.trim().length;
    }

    // 内容长度验证（最少10字符）
    if (contentLength < 10) {
        alert('内容不能少于10个字符');
        e.preventDefault();
        return;
    }

    // 悄悄话密码验证
    if (document.getElementById('qiaoqiao').checked && 
        document.getElementById('qiaoqiaopass').value.length < 6) {
        alert('查看密码至少需要6位字符');
        e.preventDefault();
        return;
    }
});
    // 视频插入处理
document.getElementById('insert-video').addEventListener('click', () => {
    new bootstrap.Modal(document.getElementById('mediaModal')).show();
});

// 媒体类型切换
document.getElementById('mediaSource').addEventListener('change', function() {
    const isLocal = this.value === 'local';
    document.getElementById('mediaFile').classList.toggle('d-none', !isLocal);
    document.getElementById('mediaUrl').classList.toggle('d-none', isLocal);
});

// 媒体插入确认
document.getElementById('confirmMedia').addEventListener('click', async function() {
    const isLocal = document.getElementById('mediaSource').value === 'local';
    let mediaValue = '';

    if (isLocal) {
        const file = document.getElementById('mediaFile').files[0];
        if (!file) return;
        
        // 验证文件
        const validTypes = ['image/jpeg', 'image/png', 'video/mp4'];
        if (!validTypes.includes(file.type)) {
            alert('不支持的文件类型');
            return;
        }
        if (file.size > 10 * 1024 * 1024) {
            alert('文件大小超过10MB限制');
            return;
        }

        // 上传处理
        const formData = new FormData();
        formData.append('file', file);
        formData.append('csrf_token', '<?= $csrfToken ?>');

        try {
            const response = await fetch('../include/upload.php', {
                method: 'POST',
                body: formData
            });
            const result = await response.json();
            mediaValue = result.url;
            
            // 更新隐藏域
            document.getElementById('mediaType').value = file.type.startsWith('video') ? 'video' : 'image';
            document.getElementById('localImage').value = mediaValue;
        } catch (error) {
            alert('上传失败: ' + error.message);
            return;
        }
    } else {
        mediaValue = document.getElementById('mediaUrl').value;
        if (!mediaValue) return;
        
        // 验证URL
        try {
            new URL(mediaValue);
        } catch {
            alert('无效的URL地址');
            return;
        }

        // 更新隐藏域
        document.getElementById('mediaType').value = 'video';
        document.getElementById('externalVideo').value = mediaValue;
    }

    // 插入内容
    if (currentMode === 'markdown') {
        const prefix = document.getElementById('mediaType').value === 'video' ? '![]' : '[]';
        document.getElementById('markdown-editor').value += `\n${prefix}(${mediaValue})`;
    } else {
        const tag = document.getElementById('mediaType').value === 'video' ? 
            `<video controls src="${mediaValue}"></video>` : 
            `<img src="${mediaValue}" class="uploaded-media">`;
        document.execCommand('insertHTML', false, tag);
    }

    bootstrap.Modal.getInstance(document.getElementById('mediaModal')).hide();
});

// HTML模式切换
document.getElementById('html-mode-toggle').addEventListener('click', function() {
    this.classList.toggle('active');
    const allowHtml = this.classList.contains('active') ? 1 : 0;
    document.getElementById('allowHtml').value = allowHtml;
    
    if (allowHtml) {
        alert('警告：启用HTML模式可能存在安全风险！');
    }
});
    </script>
</body>
</html>

